 ** handle permission camera & set barcode type in react-native-barcode-scanner-google for android

 //android/ekreutz/barcodescanner/BarcodeSanncerModule.java

  @ReactMethod
    public void setBarcodeTest(int barcodeTypes, Promise promise) {
        if (setBarcodeTypeTest1(barcodeTypes))
            promise.resolve(null);
        else
            promise.reject("3", "Attempted to setBarcodeTest barcode scanner before scanner view was instantiated.");
    }

 private boolean setBarcodeTypeTest1(int barcodeTypes) {
        BarcodeScannerView view = mBarcodeScannerManager.getBarcodeScannerView();

        if (view != null) {
            view.setBarcodeTypes(barcodeTypes);
        }

        return view != null;
    }

/android/ekreutz/barcodescanner/ui/BarcodeScannerView.java
@Override
    protected void onAttachedToWindow() {
        super.onAttachedToWindow();

        // if (!hasCameraPermission()) {
        //     // No camera permission. Alert user.
        //     AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
        //     builder.setTitle("No Camera permission")
        //         .setMessage("Enable camera permission in settings to use the scanner.")
        //         .setPositiveButton("Ok", null)
        //         .show();

        //     return;
        // }

        /**
         * Check for a few other things that the device needs for the scanner to work.
         * And send a JS event if something goes wrongs.
         *
         * Checklist: (things are checked in this order)
         * 1. The device has the latest play services
         * 2. The device has sufficient storage
         * 3. The scanner dependencies are downloaded
         */

        // check that the device has (the latest) play services available.
        int code = GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(mContext.getApplicationContext());
        if (code != ConnectionResult.SUCCESS) {
            sendNativeEvent(NO_PLAY_SERVICES_KEY, Arguments.createMap());
        } else if (mBarcodeDetector != null && !mBarcodeDetector.isOperational()) {
            // Note: The first time that an app using the barcode or face API is installed on a
            // device, GMS will download a native libraries to the device in order to do detection.
            // Usually this completes before the app is run for the first time.  But if that
            // download has not yet completed, then the above call will not detect any barcodes
            // and/or faces.
            //
            // isOperational() can be used to check if the required native libraries are currently
            // available.  The detectors will automatically become operational once the library
            // downloads complete on device.
            Log.w(TAG, "Detector dependencies are not yet available.");

            // Check for low storage.  If there is low storage, the native library will not be
            // downloaded, so detection will not become operational.
            IntentFilter lowstorageFilter = new IntentFilter(Intent.ACTION_DEVICE_STORAGE_LOW);
            boolean hasLowStorage = mContext.registerReceiver(null, lowstorageFilter) != null;

            if (hasLowStorage) {
                // Detector dependencies can't be downloaded due to low storage
                sendNativeEvent(LOW_STORAGE_KEY, Arguments.createMap());
            } else {
                // Storage isn't low, but dependencies haven't been downloaded yet
                sendNativeEvent(NOT_YET_OPERATIONAL, Arguments.createMap());
            }
        } else {
            hasAllCapabilities = true;
            start();
        }
    }

//node_modules/react-native-barcode-scanner-google/index.JS
export const setBarcodeTest = scannerModule.setBarcodeTest;



//react-native-countdown => node_modules/react-native-timer-countdown/index.js
"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_native_1 = require("react-native");
class TimerCountdown extends React.Component {
    constructor() {
        super(...arguments);
        this.mounted = false;
        this.state = {
            secondsRemaining: this.props.initialSecondsRemaining,
            timeoutId: null,
            previousSeconds: null
        };
        this.tick = () => {
            const currentSeconds = Date.now();
            const dt = this.state.previousSeconds ? currentSeconds - this.state.previousSeconds : 0;
            const interval = this.props.interval;
            const intervalSecondsRemaing = interval - (dt % interval);
            let timeout = intervalSecondsRemaing;
            if (intervalSecondsRemaing < interval / 2.0) {
                timeout += interval;
            }
            var secondsRemaining;
            if (this.props.isLate){
                secondsRemaining = Math.max(this.state.secondsRemaining + dt, 0);
            }
            else{
                secondsRemaining = Math.max(this.state.secondsRemaining - dt, 0);
            }
            const isComplete = this.state.previousSeconds && secondsRemaining <= 0;
            if (this.mounted) {
                if (this.state.timeoutId) {
                    clearTimeout(this.state.timeoutId);
                }
                this.setState({
                    timeoutId: isComplete ? null : setTimeout(this.tick, timeout),
                    previousSeconds: currentSeconds,
                    secondsRemaining
                });
            }
            if (isComplete) {
                if (this.props.onTimeElapsed) {
                    this.props.onTimeElapsed();
                }
                return;
            }
            if (this.props.onTick) {
                this.props.onTick(secondsRemaining);
            }
        };
        this.getFormattedTime = (milliseconds) => {
            if (this.props.formatSecondsRemaining) {
                return this.props.formatSecondsRemaining(milliseconds);
            }
            const remainingSec = Math.round(milliseconds / 1000);
            const seconds = parseInt((remainingSec % 60).toString(), 10);
            const minutes = parseInt(((remainingSec / 60) % 60).toString(), 10);
            const hours = parseInt((remainingSec / 3600).toString(), 10);
            const s = seconds < 10 ? '0' + seconds : seconds;
            const m = minutes < 10 ? '0' + minutes : minutes;
            let h = hours < 10 ? '0' + hours : hours;
            h = h === '00' ? '' : h + ':';
            return h + m + ':' + s;
        };
    }
    componentDidMount() {
        this.mounted = true;
        this.tick();
    }
    UNSAFE_componentWillReceiveProps(newProps) {
        if (this.state.timeoutId) {
            clearTimeout(this.state.timeoutId);
        }
        this.setState({
            previousSeconds: null,
            secondsRemaining: newProps.initialSecondsRemaining
        });
    }
    componentDidUpdate() {
        if (!this.state.previousSeconds && this.state.secondsRemaining > 0 && this.mounted) {
            this.tick();
        }
        if (!this.state.previousSeconds && this.state.secondsRemaining == 0 && this.props.isLate && this.mounted){
            this.tick();
        }
    }
    componentWillUnmount() {
        this.mounted = false;
        clearTimeout(this.state.timeoutId);
    }
    render() {
        const secondsRemaining = this.state.secondsRemaining;
        const allowFontScaling = this.props.allowFontScaling;
        const style = this.props.style;
        return (<react_native_1.Text allowFontScaling={allowFontScaling} style={style}>
        {this.getFormattedTime(secondsRemaining)}
      </react_native_1.Text>);
    }
}
TimerCountdown.defaultProps = {
    interval: 1000,
    formatSecondsRemaining: null,
    onTick: null,
    onTimeElapsed: null
};
exports.default = TimerCountdown;
